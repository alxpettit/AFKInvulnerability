package xyz.achu.afkinvulnerability.mixin;

import net.minecraft.Util;
import net.minecraft.client.gui.screens.social.PlayerEntry;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.level.Level;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import xyz.achu.afkinvulnerability.ModMain;
import xyz.achu.afkinvulnerability.PlayerLogic;

@Mixin(ServerPlayer.class)
public abstract class ServerPlayerMixin extends LivingEntity {
    @Shadow protected abstract void updateInvisibilityStatus();

    boolean are_we_afk = false;
    boolean old_are_we_afk = false;

    protected ServerPlayerMixin(EntityType<? extends LivingEntity> arg, Level arg2) {
        super(arg, arg2);
    }

    @Inject(method = "hurt", at = @At("HEAD"), cancellable = true)
    public void hurtMixin(DamageSource damageSource, float f, CallbackInfoReturnable<Boolean> cir) {
        if (are_we_afk) {
            cir.setReturnValue(false);
        }
    }

    @Inject(method = "doTick", at = @At("RETURN"))
    public void doTickMixin(CallbackInfo ci) {
        if (this.tickCount % 20 == 0) {
            old_are_we_afk = are_we_afk;
            are_we_afk = Util.getMillis() - getAsServerPlayer().getLastActionTime() > 15000L;
            if (are_we_afk != old_are_we_afk) {
                if (are_we_afk) {
                    onGoingAFK();
                } else {
                    onBackFromAFK();
                }
            }
        }
    }

    void onGoingAFK() {
        ModMain.LOGGER.info("Player \"" + getName().getString() + "\" has gone AFK.");
        this.setInvisible(true);
    }

    void onBackFromAFK() {
        ModMain.LOGGER.info("Player \"" + getName().getString() + "\" has returned!");
        this.updateInvisibilityStatus();
    }

    ServerPlayer getAsServerPlayer() {
        return (ServerPlayer)(LivingEntity)this;
    }
}
