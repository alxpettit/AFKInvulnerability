package xyz.achu.afkinvulnerability.mixin;

import net.minecraft.Util;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.level.Level;
import org.jetbrains.annotations.NotNull;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

@Mixin(ServerPlayer.class)
public abstract class ServerPlayerMixin extends LivingEntity {

    @Shadow public abstract long getLastActionTime();

    protected ServerPlayerMixin(EntityType<? extends LivingEntity> arg, Level arg2) {
        super(arg, arg2);
    }

    @Inject(method = "canBeSeenAsEnemy", at = @At("HEAD"))
    public void canBeSeenAsEnemyMixin(CallbackInfoReturnable<Boolean> cir) {
        if (playerIsAFK()) {
            cir.setReturnValue(false);
        }
    }

    @Inject(method = "hurt", at = @At("HEAD"))
    public void hurtMixin(DamageSource damageSource, float f, CallbackInfoReturnable<Boolean> cir) {
        if (playerIsAFK()) {
            cir.setReturnValue(false);
        }
    }

    @Inject(method = "take", at = @At("HEAD"))
    public void take(@NotNull Entity entity, int i, CallbackInfo ci) {
        if (playerIsAFK() && ci.isCancellable()) {
            ci.cancel();
        }
    }


    public boolean playerIsAFK() {
        return Util.getMillis() - this.getLastActionTime() > 1500L;
    }


}
