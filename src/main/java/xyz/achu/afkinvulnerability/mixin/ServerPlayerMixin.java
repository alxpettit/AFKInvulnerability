package xyz.achu.afkinvulnerability.mixin;

import com.mojang.authlib.GameProfile;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.server.network.ServerGamePacketListenerImpl;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.level.Level;
import org.jetbrains.annotations.NotNull;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import xyz.achu.afkinvulnerability.PlayerLogic;

import static xyz.achu.afkinvulnerability.ModMain.MODID;

@Mixin(ServerPlayer.class)
public abstract class ServerPlayerMixin extends ServerPlayer {
    boolean is_player_afk_old = false;


    private static final ResourceLocation afk_status = new ResourceLocation(MODID + ":" + "afk_status");

    public ServerPlayerMixin(MinecraftServer minecraftServer, ServerLevel arg, GameProfile gameProfile) {
        super(minecraftServer, arg, gameProfile);
    }

    @Shadow public abstract long getLastActionTime();

    @Shadow public abstract @NotNull ServerLevel getLevel();

    @Shadow public ServerGamePacketListenerImpl connection;


//    @Inject(method = "canBeSeenAsEnemy", at = @At("HEAD"), cancellable = true)
//    public void canBeSeenAsEnemyMixin(CallbackInfoReturnable<Boolean> cir) {
//        if (playerIsAFK()) {
//            cir.setReturnValue(false);
//        }
//    }

    @Inject(method = "hurt", at = @At("HEAD"), cancellable = true)
    public void hurtMixin(DamageSource damageSource, float f, CallbackInfoReturnable<Boolean> cir) {
        if (checkPlayerAFK()) {
            cir.setReturnValue(false);
        }
    }

//    @Inject(method = "isInvulnerableTo", at = @At("HEAD"), cancellable = true)
//    public void isInvulnerableToMixin(DamageSource src, CallbackInfoReturnable<Boolean> cir) {
//        if (checkPlayerAFK()) {
//            cir.setReturnValue(true);
//        }
//    }

//    @Inject(method = "isInvulnerable", at = @At("HEAD"), cancellable = true)
//    public void isInvulnerableMixin(CallbackInfoReturnable<Boolean> cir) {
//        if (checkPlayerAFK()) {
//            cir.setReturnValue(true);
//        }
//    }

//    void sendAfkStatus(boolean value) {
//        FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
//        buf.writeBoolean(value);
//        this.connection.send(new ClientboundCustomPayloadPacket(afk_status, buf));
//    }

//    @Inject(method = "take", at = @At("HEAD"))
//    public void take(@NotNull Entity entity, int i, CallbackInfo ci) {
//        if (checkPlayerAFK() && ci.isCancellable()) {
//            ci.cancel();
//        }
//    }

//    @Inject(method = "isAlive", at = @At("HEAD"))
//    public void isAlive(CallbackInfoReturnable<Boolean> cir) {
//        if (checkPlayerAFK()) {
//            cir.setReturnValue(false);
//        }
//    }

    public boolean checkPlayerAFK() {
        boolean is_player_afk = PlayerLogic.isPlayerAFK((ServerPlayer)this);
        
        if (is_player_afk_old != is_player_afk) {
            is_player_afk_old = is_player_afk;
        }
        return is_player_afk;
        // connection.handleCustomPayload(arg);
    }
}
